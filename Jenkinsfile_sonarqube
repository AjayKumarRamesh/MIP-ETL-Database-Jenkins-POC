pipeline {
    agent any
    options {
        ansiColor('xterm')
    }

    stages {
        
        stage("Install Sonar Scanner") {
            environment{
                scannerBaseHome = "${HOME}/scannerBaseHome"
                scannerHome = "${scannerBaseHome}/sonar-scanner-4.7.0.2747-linux"

            }
            steps {

                // Install Sonar Scanner
                sh("mkdir ${scannerBaseHome} && cd ${scannerBaseHome} && wget --no-verbose -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip && unzip -qq sonar-scanner.zip && rm -rf sonar-scanner.zip")

                // copy the sonar-project.properties into conf directory of scannerHome
                sh("cp -rf sonar-project.properties ${scannerHome}/conf/")               
            }

        } //stage

        stage("Sonarqube Code Quality Check"){
            environment{
                scannerBaseHome = "${HOME}/scannerBaseHome"
                scannerHome = "${scannerBaseHome}/sonar-scanner-4.7.0.2747-linux"
                SONAR_SCANNER_OPTS = "-Djavax.net.ssl.trustStore=${WORKSPACE}/cacerts"
                // SONAR_LOGIN = "-Dsonar.login=${}"
            }
            steps{
                // Importing the certificates
                withCredentials([file(credentialsId: 'ibm_root', variable: 'FILE')]){
                    sh "keytool -importcert -keystore cacerts -storepass changeit -file $FILE -alias 'ibm_root' -noprompt -trustcacerts"
                }
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
                    sh("${scannerHome}/bin/sonar-scanner -Dsonar.login=${SONAR_TOKEN}")
                }
                
            }
        } //stage
    } //stages
} //pipeline

