pipeline {
    agent any
    options {
        ansiColor('xterm')
    }

    stages {
        stage("Cloning required repositories"){
            steps {

                script {
                    AirflowK8s_DIR = "MAP-ETL-Framework-AirflowK8s"
                    AirflowK8s_DIR_PATH = "${HOME}/${AirflowK8s_DIR}"

                    ETL_Framework_DIR = "MAP-ETL-Framework"
                    ETL_Framework_DIR_PATH = "${HOME}/${ETL_Framework_DIR}"
                }

                // Cloning MAP-ETL-Framework-AirflowK8s Repo
                sh("mkdir ${AirflowK8s_DIR_PATH}")
                dir("${AirflowK8s_DIR_PATH}"){
                    git credentialsId: 'sangita_id_rsa',
                        url: "ssh://git@github.ibm.com/CIO-MAP/MAP-ETL-Framework-AirflowK8s.git",
                        branch: 'master'
                }

                // Cloning MAP-ETL-Framework Repo
                sh("mkdir ${ETL_Framework_DIR_PATH}")
                dir("${ETL_Framework_DIR_PATH}"){
                    git credentialsId: 'sangita_id_rsa',
                        url: "ssh://git@github.ibm.com/CIO-MAP/MAP-ETL-Framework.git",
                        branch: 'master'
                }

                
                sh("ls ${HOME}")
                sh("ls ${HOME}/MAP-ETL-Framework-AirflowK8s")
                sh("pwd")   
            }
        } //stage
        
        stage("Install Sonar Scanner") {
            environment{
                scannerBaseHome = "${HOME}/scannerBaseHome"
                SCANNER_HOME = "${scannerBaseHome}/sonar-scanner-4.7.0.2747-linux"

            }
            steps {

                // Install Sonar Scanner
                sh("mkdir ${scannerBaseHome} && cd ${scannerBaseHome} && wget --no-verbose -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip && unzip -qq sonar-scanner.zip && rm -rf sonar-scanner.zip")

                // copy the sonar-project.properties into conf directory of SCANNER_HOME
                // sh("cp -rf sonar-project.properties ${SCANNER_HOME}/conf/")               
            }

        } //stage

        stage("Sonarqube Code Quality Check"){
            environment{
                scannerBaseHome = "${HOME}/scannerBaseHome"
                SCANNER_HOME = "${scannerBaseHome}/sonar-scanner-4.7.0.2747-linux"
                SONAR_SCANNER_OPTS = "-Djavax.net.ssl.trustStore=${HOME}/cacerts"
                SONAR_HOST_URL = "https://airflow.map-mktsys-dev.limited-use.ibm.com/sonarqube/"
            }

            steps{
                
                script {
                    AirflowK8s_DIR = "MAP-ETL-Framework-AirflowK8s"
                    AirflowK8s_DIR_PATH = "${HOME}/${AirflowK8s_DIR}"

                    ETL_Framework_DIR = "MAP-ETL-Framework"
                    ETL_Framework_DIR_PATH = "${HOME}/${ETL_Framework_DIR}"
                }

                // Importing the certificates
                // sh("cd ${HOME}")
                withCredentials([file(credentialsId: 'ibm_root', variable: 'FILE')]){
                    sh "keytool -importcert -keystore ${HOME}/cacerts -storepass changeit -file $FILE -alias 'ibm_root' -noprompt -trustcacerts"
                }

                // checking the Code Quality
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
                    

                    sh("echo -e '\n\033[1;34m-------- Scanning MIP-ETL-Database-Jenkins-POC Repo --------\033[0m\n'")
                    sh("${SCANNER_HOME}/bin/sonar-scanner -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName='MIP-ETL-Database-Jenkins-POC' -Dsonar.projectKey='MIP-ETL-Database-Jenkins-POC' -Dsonar.projectBaseDir=${WORKSPACE}")
                    
    
                    sh("echo -e '\n\033[1;34m-------- Scanning ${AirflowK8s_DIR} Repo --------\033[0m\n'")
                    sh("${SCANNER_HOME}/bin/sonar-scanner -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName=${AirflowK8s_DIR} -Dsonar.projectKey=${AirflowK8s_DIR} -Dsonar.projectBaseDir=${AirflowK8s_DIR_PATH}")

                }
                
            }
        } //stage
    } //stages
} //pipeline

