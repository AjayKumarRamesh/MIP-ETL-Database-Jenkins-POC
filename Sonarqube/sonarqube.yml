---
apiVersion: 'kubernetes-client.io/v1'
kind: ExternalSecret
metadata:
  name: sonarqube-secrets
  namespace: sonarqube
spec:
  backendType: ibmcloudSecretsManager
  keyByName: true 
  data:
    - key: DEV_LDAP_BIND_PASSWORD
      property: payload
      name: LDAP_BIND_PASSWORD
      secretType: arbitrary
    - key: SONARQUBE_POSTGRESQL_CREDENTIALS
      property: username
      name: SONARQUBE_JDBC_USERNAME
      secretType: username_password
    - key: SONARQUBE_POSTGRESQL_CREDENTIALS
      property: password
      name: SONARQUBE_JDBC_PASSWORD
      secretType: username_password
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonar-data-pvc
  namespace: sonarqube
spec:
  storageClassName: ibmc-file-gold
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonar-extensions-pvc
  namespace: sonarqube
spec:
  storageClassName: ibmc-file-gold
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonar-properties-configmap
  namespace: sonarqube
  labels:
    app: postgres
data:
  url: jdbc:postgresql://postgres:5432/postgres
  sonar.properties: |
    # --------------------------------------------------------------------------------------------------
    # WEB SERVER

    # Web context. When set, it must start with forward slash (for example /sonarqube)
    sonar.web.context=/sonarqube

    # --------------------------------------------------------------------------------------------------
    # LDAP CONFIGURATION

    # Enable the LDAP feature
    sonar.security.realm=LDAP

    # Set to true when connecting to a LDAP server using a case-insensitive setup.
    sonar.authenticator.downcase=true

    # URL of the LDAP server. Note that if you are using ldaps, then you should install the server certificate into the Java truststore.
    ldap.url=ldaps://bluepages.ibm.com:636/

    # Bind DN is the username of an LDAP user to connect (or bind) with. Leave this blank for anonymous access to the LDAP directory (optional)
    ldap.bindDn=cn=cio_dyna_bai-000009_prod,ou=bluepages,o=ibm.com

    # Bind Password is the password of the user to connect with. Leave this blank for anonymous access to the LDAP directory (optional)
    # ldap.bindPassword=password
    

    # USER MAPPING

    # Distinguished Name (DN) of the root node in LDAP from which to search for users (mandatory)
    # ldap.user.baseDn=cn=cio_dyna_bai-000009_prod,dc=ibm,dc=com

    # LDAP user request. (default: (&(objectClass=inetOrgPerson)(uid={login})) )
    # ldap.user.request=(&(objectClass=ibm-nestedGroup)(sAMAccountName={login}))
    
    # Attribute in LDAP defining the user’s real name. (default: cn)
    # ldap.user.realNameAttribute=cn

    # Attribute in LDAP defining the user’s email. (default: mail)
    # ldap.user.emailAttribute=email

    # GROUP MAPPING

    # Distinguished Name (DN) of the root node in LDAP from which to search for groups. (optional, default: empty)
    # ldap.group.baseDn=cn=groups,dc=ibm,dc=com

    # LDAP group request (default: (&(objectClass=groupOfUniqueNames)(uniqueMember={dn})) )
    # ldap.group.request=(&(objectClass=group)(member={dn}))
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  selector:
    matchLabels:
      app: sonarqube
  replicas: 1
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
        - name: sonarqube
          image: sonarqube:latest
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 500m
              memory: 1024Mi
            limits:
              cpu: 2000m
              memory: 2048Mi
          ports:
            - containerPort: 9000
              protocol: TCP
          envFrom:
            - secretRef:
                name: sonarqube-secrets
          env:
            - name: "SONARQUBE_JDBC_URL"
              valueFrom:
                configMapKeyRef:
                  name: sonar-properties-configmap
                  key: url 
          volumeMounts:
            - name: sonar-data
              mountPath: "/opt/sonarqube/data/"
            - name: sonar-extensions
              mountPath: "/opt/sonarqube/extensions/"
            - name: config-volume
              mountPath: /kubeconf/
          lifecycle:
            postStart:
              exec:
                command: ["cp", "/kubeconf/sonar.properties", "/opt/sonarqube/conf/"]
                        
      volumes:
        - name: sonar-data
          persistentVolumeClaim:
            claimName: sonar-data-pvc
        - name: sonar-extensions
          persistentVolumeClaim:
            claimName: sonar-extensions-pvc
        - name: config-volume
          configMap:
            name: sonar-properties-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  ports:
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 80-tcp
      port: 80
      protocol: TCP
      targetPort: 9000
  selector:
    app: sonarqube
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: sonarqube-ingress
  namespace: sonarqube
  annotations:
    kubernetes.io/ingress.class: "private-iks-k8s-nginx"
spec:
  rules:
    - host: airflow.map-mktsys-dev.limited-use.ibm.com
      http:
        paths:
          - path: /sonarqube
            pathType: ImplementationSpecific
            backend:
              serviceName: sonarqube
              servicePort: 9000
        