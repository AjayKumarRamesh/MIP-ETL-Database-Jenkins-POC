kind: Secret
apiVersion: v1
metadata:
  name: default-us-icr-io
  namespace: mipdashboard
data:
  .dockerconfigjson: >-
    eyJhdXRocyI6eyJ1cy5pY3IuaW8iOnsidXNlcm5hbWUiOiJpYW1hcGlrZXkiLCJwYXNzd29yZCI6Im9Wa1hlcDRJdEdiWVpEd21jWkJ2VHZKeDd0LU05bEZVU1JadWYtZVQyTTJvIiwiZW1haWwiOiJpYW1hcGlrZXkiLCJhdXRoIjoiYVdGdFlYQnBhMlY1T205V2ExaGxjRFJKZEVkaVdWcEVkMjFqV2tKMlZIWktlRGQwTFUwNWJFWlZVMUphZFdZdFpWUXlUVEp2In19fQ==
type: kubernetes.io/dockerconfigjson
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mipdashboard
  labels:
    app: mipdashboard
  namespace: mipdashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mipdashboard
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mipdashboard
    spec:
      containers:
        - name: mipdashboard
          image: us.icr.io/map-dev-namespace/mipdashboard:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
      imagePullSecrets:
        - name: default-us-icr-io
        
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mipdashboard
  namespace: mipdashboard
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: 3000-tcp
    port: 3000
    protocol: TCP
    targetPort: 3000
  - name: 5000-tcp
    port: 5000
    protocol: TCP
    targetPort: 5000
  - name: 80-tcp
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: mipdashboard
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: mipdashboard
  namespace: mipdashboard
  annotations:
   kubernetes.io/ingress.class: "private-iks-k8s-nginx"
spec:
  rules:
    - host: airflow.map-mktsys-dev.limited-use.ibm.com
      http:
        paths:
          - path: /mipdashboard
            pathType: ImplementationSpecific
            backend:
              serviceName: mipdashboard
              servicePort: 8080